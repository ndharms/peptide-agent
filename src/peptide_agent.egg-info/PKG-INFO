Metadata-Version: 2.4
Name: peptide-agent
Version: 1.0.0
Summary: Agent to recommend peptide self-assembly experimental conditions
Author: Nathan Harms
License: MIT
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typer>=0.12
Requires-Dist: pydantic>=2.6
Requires-Dist: pyyaml>=6.0
Requires-Dist: langchain>=0.2
Requires-Dist: langgraph>=0.2
Requires-Dist: langchain-google-genai>=2.0
Requires-Dist: langchain-community>=0.2
Requires-Dist: langchain-huggingface>=0.1.0
Requires-Dist: faiss-cpu>=1.7
Requires-Dist: sentence-transformers>=2.2
Requires-Dist: pandas>=2.0
Requires-Dist: schema>=0.7.5
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: ruff>=0.6; extra == "dev"
Requires-Dist: black>=24.0; extra == "dev"
Requires-Dist: mypy>=1.8; extra == "dev"
Dynamic: license-file

# MIT's `peptide-agent`

This project is designed to enable a user to predict the most probable method for success when synthesizing peptides.


# Background Information

## The initial use case

Kubra, one of our teammates, synthesized a peptide as part of her PhD dissertation.
During her defense, she was asked, "why did you choose that particular synthesis route for this peptide?"
In actuality, there are many different experimental procedures for creating many different morphologies of this particular peptide.
Her answer was "well, there were many methods... I chose one and it worked."

Although this answer satisfies "why" the decision was made,
our user needs a more robust way to choose a synthesis route with the greatest probability of success.


## The proposed solution

We propose an LLM-based solution to address our user's need.
This solution will take a user's requested peptide and a target structural assembly (i.e., peptide morphology) as input.
First, the LLM will search the `data/relevant_papers` for relevant papers which contain synthesis procedures for identical and/or similar peptides.
This will serve as a base understanding which mirrors a "literature review" which a scientist would perform.
Secondly, we will manually curate examples of successful synthesis and store these in the `data` directory.
The LLM will reference these examples within the context of the task to predict multiple guesses
for the experimental conditions required for the synthesis.
These conditions include (but are not limited to) pH, Concentration, Temperature, Solvent, and Time.

With these predicted conditions and the "literature review," the LLM will construct a "Peptide Synthesis Profile" for the peptide of interest.


# Solution Design

## Architecture and Repo Design

Repo layout:

- `./src/peptide_agent`: library and CLI implementation
- `./src/peptide_agent/prompts`: prompt assets
- `./data`: curated examples and indexes
- `pyproject.toml`: build metadata and dependencies

Quickstart:

1) Install

```bash
pip install -e .
```

2) Set environment variables

```bash
export GEMINI_API_KEY=...   # required for LLM calls
# Optional overrides:
export PEPTIDE_DATA_DIR=./data
export PEPTIDE_FAISS_DIR=./data/index/faiss
export PEPTIDE_EMBED_MODEL=sentence-transformers/all-MiniLM-L6-v2
export PEPTIDE_LLM_MODEL=gemini-2.5-pro
export PEPTIDE_TOP_K=10
export PEPTIDE_BATCH_SIZE=40
```

3) Build or load the index

```bash
peptide-agent index --config path/to/config.yaml
```

4) Run predictions

```bash
# Single
peptide-agent predict -p FF -t nanofibers -c path/to/config.yaml

# Batch
peptide-agent predict --input-json tests/test_agent_predict/test_requests.json -c tests/test_agent_predict/test_config.yaml
```


## Expected outputs

### Output Format

The agent returns synthesis recommendations in a structured format:

```
PH: (5.0,7.0)
Concentration (log M): (-3.0,-1.0)
Temperature (C): (20.0,25.0)
Solvent: Water
Estimated Time (minutes): (60,120)

Reasoning: The peptide FF is a diphenylalanine known to self-assemble
into nanofibers at neutral pH in aqueous solutions. The hydrophobic
aromatic groups facilitate π-π stacking interactions that drive fiber
formation. Based on similar examples in the training data, these conditions
optimize the formation of well-defined nanofiber structures.
```

### Example Predictions

**Single Prediction:**
```bash
peptide-agent predict -p FF -t nanofibers
```

**Batch Prediction:**
```bash
peptide-agent predict --input-json batch_requests.json
```

Returns JSON array of reports:
```json
[
  "PH: (6.0,7.5)\nConcentration (log M): (-2.0,-1.0)\nTemperature (C): (20.0,25.0)\nSolvent: Water\nEstimated Time (minutes): (30,60)",
  "PH: (7.0,8.0)\nConcentration (log M): (-3.0,-2.0)\nTemperature (C): (20.0,25.0)\nSolvent: PBS\nEstimated Time (minutes): (120,180)"
]
```

## How it works

1. **Retrieval-Augmented Generation (RAG)**: The agent uses FAISS vector search to retrieve similar peptide synthesis examples from the training data.

2. **Context-Aware Prompting**: Retrieved examples are provided as context to the LLM, along with detailed instructions about peptide self-assembly.

3. **Multi-shot Learning**: The solution relies on [multi-shot learning](https://medium.com/@anmoltalwar/multi-shot-prompting-15a7c4b8b78e) with manually curated examples from scientific literature.

4. **Structured Output**: Predictions follow a validated schema ensuring consistency and parseability.

## Configuration

### Environment Variables

```bash
export GEMINI_API_KEY=your_api_key_here       # Required
export PEPTIDE_DATA_DIR=./data                # Optional
export PEPTIDE_FAISS_DIR=./data/index/faiss   # Optional
export PEPTIDE_EMBED_MODEL=sentence-transformers/all-MiniLM-L6-v2  # Optional
export PEPTIDE_LLM_MODEL=gemini-2.5-pro       # Optional
export PEPTIDE_TOP_K=10                       # Optional
export PEPTIDE_BATCH_SIZE=40                  # Optional
```

### Configuration File

Alternatively, use a YAML config file:

```yaml
data_dir: ./data
faiss_cache_dir: ./data/index/faiss
embed_model_name: sentence-transformers/all-MiniLM-L6-v2
llm_model: gemini-2.5-pro
top_k: 10
batch_size: 40
```

Pass it to commands with `-c` or `--config`:
```bash
peptide-agent predict -p FF -t nanofibers -c config.yaml
```

## Logging

Enable verbose logging for debugging:
```bash
peptide-agent predict -p FF -t nanofibers --verbose
```

Logs include:
- Context retrieval information
- LLM invocation details
- Validation warnings
- Error traces

## Development

### Running Tests

```bash
# Install dev dependencies
pip install -e ".[dev]"

# Run tests
pytest

# Run with coverage
pytest --cov=peptide_agent --cov-report=html
```

### Code Quality

```bash
# Format code
black src/ tests/

# Lint
ruff check src/ tests/

# Type checking
mypy src/
```

## Troubleshooting

### Common Issues

**Issue**: `GEMINI_API_KEY environment variable is required`
- **Solution**: Set the API key: `export GEMINI_API_KEY=your_key`

**Issue**: `No training CSV found in data directory`
- **Solution**: Ensure `data/train_split.csv` exists or update `data_dir` in config

**Issue**: `Failed to load embedding model`
- **Solution**: Check internet connection and ensure sufficient disk space for model download

**Issue**: `Report validation failed`
- **Solution**: This is non-critical; the report is still returned but may not match expected format exactly

## License

MIT License - see [LICENSE](LICENSE) file for details.

## Citation

If you use this work, please cite the relevant papers mentioned in [data/README.md](data/README.md).
